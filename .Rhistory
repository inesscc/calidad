v_conglom = "varunit",
v_estratos = "varstrat",
tipoCALCULO = "Media",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_mean(var = "gastot_hd",design = dc),publish = T,scheme = "chile")%>%
rename(calidad = label)))
### probamos medias - enfoque chile - dominio
test_that("probamos medias - enfoque chile - dominio",
create_tabulado(calidad::epf_personas,
v_interes = "gastot_hd",
v_cruce = "zona",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "fe",
v_conglom = "varunit",
v_estratos = "varstrat",
tipoCALCULO = "Media",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_mean(var = "gastot_hd",domains = "zona",design = dc),publish = T,scheme = "chile")%>%
rename(calidad = label)))
### probamos medias - enfoque chile - dominio
test_that("probamos medias - enfoque chile - dominio",
expect_equal(create_tabulado(calidad::epf_personas,
v_interes = "gastot_hd",
v_cruce = "zona",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "fe",
v_conglom = "varunit",
v_estratos = "varstrat",
tipoCALCULO = "Media",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_mean(var = "gastot_hd",domains = "zona",design = dc),publish = T,scheme = "chile")%>%
rename(calidad = label)))
### probamos medias - enfoque chile - dominio
test_that("probamos medias - enfoque chile - dominio",
expect_equal(create_tabulado(calidad::epf_personas,
v_interes = "gastot_hd",
v_cruce = "zona",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "fe",
v_conglom = "varunit",
v_estratos = "varstrat",
tipoCALCULO = "Media",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_mean(var = "gastot_hd",domains = "zona",design = dc),publish = T,scheme = "chile")%>%
rename(calidad = label)))
### probamos medias - enfoque chile - 2 dominios
test_that("probamos medias - enfoque chile - 2 dominios",
expect_equal(create_tabulado(calidad::epf_personas,
v_interes = "gastot_hd",
v_cruce = "zona+sexo",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "fe",
v_conglom = "varunit",
v_estratos = "varstrat",
tipoCALCULO = "Media",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_mean(var = "gastot_hd",domains = "zona+sexo",design = dc),publish = T,scheme = "chile")%>%
rename(calidad = label)))
dc_enusc <- survey::svydesign(ids = ~Conglomerado,strata = ~VarStrat,weights = ~Fact_Pers,data = calidad::enusc)
### probamos proporciones - enfoque cepal
test_that("probamos proporciones - enfoque cepal",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = NULL,
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal"),calidad::evaluate(calidad::create_prop(var = "VP_DC",design = dc_enusc,eclac_input = T),publish = T,scheme = "cepal") %>%
mutate(label = dplyr::case_when(label == "publish" ~ "Publicar",
label == "review" ~ "Revisar",
label == "supress" ~ "Suprimir")) %>%
rename(calidad = label)))
### probamos proporciones - enfoque chile
test_that("probamos proporciones - enfoque chile",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = NULL,
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_prop(var = "VP_DC",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)))
### probamos proporciones - enfoque cepal - dominio
test_that("probamos proporciones - enfoque cepal - dominio",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = "enc_region",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal"),calidad::evaluate(calidad::create_prop(var = "VP_DC",domains = "enc_region",design = dc_enusc,eclac_input = T),publish = T,scheme = "cepal") %>%
mutate(label = dplyr::case_when(label == "publish" ~ "Publicar",
label == "review" ~ "Revisar",
label == "supress" ~ "Suprimir")) %>%
rename(calidad = label)))
### probamos proporciones - enfoque chile - dominio
test_that("probamos proporciones - enfoque chile - dominio",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = "enc_region",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_prop(var = "VP_DC",domains = "enc_region",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)))
### probamos proporciones - enfoque cepal - 2 dominios
test_that("probamos proporciones - enfoque cepal - 2 dominios",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = "enc_region+rph_sexo",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal"),calidad::evaluate(calidad::create_prop(var = "VP_DC",domains = "enc_region+rph_sexo",design = dc_enusc,eclac_input = T),publish = T,scheme = "cepal") %>%
mutate(label = dplyr::case_when(label == "publish" ~ "Publicar",
label == "review" ~ "Revisar",
label == "supress" ~ "Suprimir")) %>%
rename(calidad = label)))
test_that("probamos proporciones - enfoque chile - 2 dominio",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = "enc_region+rph_sexo",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_prop(var = "VP_DC",domains = "enc_region",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)))
test_that("probamos proporciones - enfoque chile - 2 dominio",
expect_equal(create_tabulado(calidad::enusc,
v_interes = "VP_DC",
v_cruce = "enc_region+rph_sexo",
denominador = NULL,
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "chile"),calidad::evaluate(calidad::create_prop(var = "VP_DC",domains = "enc_region+rph_sexo",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)))
create_tabulado(calidad::enusc,
v_interes = "muj_insg_micro",
v_cruce = NULL,
denominador = "hom_insg_micro",
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal")
calidad::evaluate(calidad::create_prop(var = "muj_ins_micro",denominador = "hom_insg_micro",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)
calidad::create_prop(var = "muj_ins_micro",denominador = "hom_insg_micro",design = dc_enusc)
calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc)
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc))
devtools::load_all(".")
create_tabulado(calidad::enusc,
v_interes = "muj_insg_micro",
v_cruce = NULL,
denominador = "hom_insg_micro",
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal")
calidad::evaluate(calidad::create_prop(var = "muj_ins_micro",denominador = "hom_insg_micro",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)
dc_enusc <- survey::svydesign(ids = ~Conglomerado,strata = ~VarStrat,weights = ~Fact_Pers,data = calidad::enusc)
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc))
calidad::evaluate(calidad::create_prop(var = "muj_ins_micro",denominador = "hom_insg_micro",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)
create_tabulado(calidad::enusc,
v_interes = "muj_insg_micro",
v_cruce = NULL,
denominador = "hom_insg_micro",
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal")
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc),scheme = "cepal")
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc,eclac_input = T),scheme = "cepal")
remove.packages("calidad")
devtools::install_github("https://github.com/inesscc/calidad")
devtools::install_github("https://github.com/inesscc/calidad")
devtools::load_all(".")
source("C:/Users/Ricardo/Documents/INE/shiny_calidad2/tests/testthat/test-create_tabulado.R", echo=TRUE)
source("C:/Users/Ricardo/Documents/INE/shiny_calidad2/tests/testthat/test-create_tabulado.R", echo=TRUE)
create_tabulado(calidad::enusc,
v_interes = "muj_insg_micro",
v_cruce = NULL,
denominador = "hom_insg_micro",
v_subpob = NULL,
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Proporción",
ajuste_ene = FALSE,
ci = FALSE,
scheme = "cepal")
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc),publish = T,scheme = "chile") %>%
rename(calidad = label)
calidad::evaluate(calidad::create_prop(var = "muj_insg_micro",denominador = "hom_insg_micro",design = dc_enusc,eclac_input = T),scheme = "cepal")
devtools::load_all(".")
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
shiny_calidad()
server <- function(input, output, session){
etiquetas <- reactive(labelled::is.labelled(input$file[[input$varCRUCE[1]]]))
}
server <- function(input, output, session){
etiquetas <- reactive(labelled::is.labelled(input$file[[input$varCRUCE[1]]]))
}
server <- function(input, output, session){
etiquetas <- reactive(labelled::is.labelled(input$file[[input$varCRUCE[1]]]))
}
server <- function(input, output, session){
etiquetas <- reactive(labelled::is.labelled(input$file[[input$varCRUCE[1]]]))
}
testServer(server, {
session$setInputs(file = shiny_calidad2::enusc_2020_etiq,
varCRUCE = "enc_region")
print(etiquetas())
})
devtools::load_all(".")
shiny_calidad()
#### testeo de etiquetas ####
test_that("testeo de etiquetas",
expect_equal(create_tabulado(shiny_calidad2::enusc_2020_etiq,
v_interes = "VP_DC",
v_cruce = c("enc_region"),
denominador = NULL,
v_subpob = "",
v_fexp1 = "Fact_Pers",
v_conglom = "Conglomerado",
v_estratos = "VarStrat",
tipoCALCULO = "Conteo casos",
ajuste_ene = FALSE,
ci = FALSE,
etiquetas = TRUE,
scheme = "chile")$enc_region,names(labelled::val_labels(shiny_calidad2::enusc_2020_etiq$enc_region))))
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rlang::last_error()
devtools::load_all(".")
devtools::load_all(".")
rlang::last_error()
devtools::load_all(".")
devtools::load_all(".")
shiny_calidad()
shiny_calidad()
runApp('R')
devtools::load_all(".")
shiny_calidad()
20549+119445
library(shiny)
ui <- fluidPage(
radioButtons(inputId = 'switchtab',label = "prueba",choices = list("un"="uno","do"="dos")),
textOutput('code_ran')
)
server <- function(input, output, session){
datos <- reactiveVal(NULL)
eventReactive({
if(input$switchtab == "un"){
datos("uno")
}else if(input$switchtab == "do"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
datos <- reactiveVal(NULL)
observeEvent(input$switchtab,{
if(input$switchtab == "un"){
datos("uno")
}else if(input$switchtab == "do"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
server <- function(input, output, session){
datos <- reactiveVal(NULL)
observeEvent(input$switchtab,{
if(input$switchtab == "un"){
datos("uno")
}else if(input$switchtab == "do"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
datos <- reactiveVal(NULL)
datos <- reactive({
if(input$switchtab == "un"){
datos("uno")
}else if(input$switchtab == "do"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
shinyApp(ui = ui, server = server)
runApp('R')
devtools::load_all(".")
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
datos <- reactiveVal(NULL)
datos <- reactive({
if(input$switchtab == "uno"){
datos("uno")
}else if(input$switchtab == "dos"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
radioButtons(inputId = 'switchtab',label = "prueba",choices = list("uno","dos")),
textOutput('code_ran')
)
server <- function(input, output, session){
datos <- reactiveVal(NULL)
datos <- reactive({
if(input$switchtab == "uno"){
datos("uno")
}else if(input$switchtab == "dos"){
datos("uno")
}
})
# observeEvent(input$switchtab, {
#   datos("uno")
# })
#
# observeEvent(input$switchtab, {
#   datos("dos")
# })
#
output$code_ran <- renderText({paste("dato:",datos(),
"print:",input$switchtab)})
}
shinyApp(ui = ui, server = server)
library(shiny)
tab1_ui <- tagList(
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton('reset', 'RESET'),
actionButton("update","UPDATE"),
),
mainPanel(
plotOutput("distPlot")
) )
)
ui <- navbarPage(
title = "Old Faithful Geyser Data",
tabPanel('Tab 1',
uiOutput('tab_1_ui')),
tabPanel('Tab 2',
selectInput('iris_nms', 'Select Column', names(iris)))
)
server <- function(input, output,session) {
#show the ui at the start of the app.
output$tab_1_ui <- renderUI({
tab1_ui
})
# When reset button is pressed, reset the slider value and send a 'push update' signal
observeEvent(input$reset,{
output$tab_1_ui <- renderUI({
tab1_ui
})
})
# When update button is pressed, send a 'push update' signal
observe({
input$update
input$reset
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = isolate(input$bins[1]))
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
radioButtons(inputId = 'switchtab',label = "prueba",choices = list("un"="uno","do"="dos")),
textOutput('code_ran')
)
install.packages("reactlog")
install.packages("reactlog")
reactlog::reactlog_enable()
shiny_calidad()
shiny::reactlogShow()
devtools::load_all(".")
shiny_calidad()
devtools::load_all(".")
shiny_calidad()
